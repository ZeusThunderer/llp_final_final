/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NT_STRUCTS_TYPES_H
#define NT_STRUCTS_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _DataType_ {
  DATA_TYPE__INT_TYPE = 0,
  DATA_TYPE__FLOAT_TYPE = 1,
  DATA_TYPE__STRING_TYPE = 2,
  DATA_TYPE__BOOL_TYPE = 3
};
typedef enum _DataType_ DataType_;

/* return the name of the constant */
const char *
toString_DataType_(int value); 

enum _QueryType_ {
  QUERY_TYPE__CREATE_STMT = 0,
  QUERY_TYPE__DROP_STMT = 1,
  QUERY_TYPE__SELECT_STMT = 2,
  QUERY_TYPE__UPDATE_STMT = 3,
  QUERY_TYPE__INSERT_STMT = 4,
  QUERY_TYPE__DELETE_STMT = 5
};
typedef enum _QueryType_ QueryType_;

/* return the name of the constant */
const char *
toString_QueryType_(int value); 

enum _LogicalOperator_ {
  LOGICAL_OPERATOR__AND_OP = 0,
  LOGICAL_OPERATOR__OR_OP = 1
};
typedef enum _LogicalOperator_ LogicalOperator_;

/* return the name of the constant */
const char *
toString_LogicalOperator_(int value); 

enum _CompType_ {
  COMP_TYPE__EQUALS_COMP = 0,
  COMP_TYPE__NOT_EQUALS_COMP = 1,
  COMP_TYPE__GREATER_COMP = 2,
  COMP_TYPE__LESS_COMP = 3,
  COMP_TYPE__GREATER_EQUALS_COMP = 4,
  COMP_TYPE__LESS_EQUALS_COMP = 5,
  COMP_TYPE__LIKE_COMP = 6
};
typedef enum _CompType_ CompType_;

/* return the name of the constant */
const char *
toString_CompType_(int value); 

enum _Status_ {
  STATUS__OK = 0,
  STATUS__TABLE_NOT_FOUND = 1,
  STATUS__BAD_REQUEST = 2,
  STATUS__SERVER_ERROR = 3
};
typedef enum _Status_ Status_;

/* return the name of the constant */
const char *
toString_Status_(int value); 

/* struct Cell_ */
struct _Cell_
{ 
  ThriftStruct parent; 

  /* public */
  gint64 integer;
  gboolean __isset_integer;
  gdouble dbl;
  gboolean __isset_dbl;
  gboolean bl;
  gboolean __isset_bl;
  gchar * str;
  gboolean __isset_str;
};
typedef struct _Cell_ Cell_;

struct _Cell_Class
{
  ThriftStructClass parent;
};
typedef struct _Cell_Class Cell_Class;

GType cell__get_type (void);
#define TYPE_CELL_ (cell__get_type())
#define CELL_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CELL_, Cell_))
#define CELL__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CELL_, Cell_Class))
#define IS_CELL_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CELL_))
#define IS_CELL__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CELL_))
#define CELL__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CELL_, Cell_Class))

/* struct Column_ */
struct _Column_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * column_name;
  gboolean __isset_column_name;
  DataType_ data_type;
  gboolean __isset_data_type;
  gint16 size;
  gboolean __isset_size;
};
typedef struct _Column_ Column_;

struct _Column_Class
{
  ThriftStructClass parent;
};
typedef struct _Column_Class Column_Class;

GType column__get_type (void);
#define TYPE_COLUMN_ (column__get_type())
#define COLUMN_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMN_, Column_))
#define COLUMN__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMN_, Column_Class))
#define IS_COLUMN_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMN_))
#define IS_COLUMN__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMN_))
#define COLUMN__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMN_, Column_Class))

/* struct CreateStmt_ */
struct _CreateStmt_
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * cols;
  gboolean __isset_cols;
  gchar * tblName;
  gboolean __isset_tblName;
};
typedef struct _CreateStmt_ CreateStmt_;

struct _CreateStmt_Class
{
  ThriftStructClass parent;
};
typedef struct _CreateStmt_Class CreateStmt_Class;

GType create_stmt__get_type (void);
#define TYPE_CREATE_STMT_ (create_stmt__get_type())
#define CREATE_STMT_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CREATE_STMT_, CreateStmt_))
#define CREATE_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CREATE_STMT_, CreateStmt_Class))
#define IS_CREATE_STMT_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CREATE_STMT_))
#define IS_CREATE_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CREATE_STMT_))
#define CREATE_STMT__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CREATE_STMT_, CreateStmt_Class))

/* struct Val_ */
struct _Val_
{ 
  ThriftStruct parent; 

  /* public */
  Cell_ * cell;
  gboolean __isset_cell;
  DataType_ type;
  gboolean __isset_type;
};
typedef struct _Val_ Val_;

struct _Val_Class
{
  ThriftStructClass parent;
};
typedef struct _Val_Class Val_Class;

GType val__get_type (void);
#define TYPE_VAL_ (val__get_type())
#define VAL_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_VAL_, Val_))
#define VAL__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_VAL_, Val_Class))
#define IS_VAL_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_VAL_))
#define IS_VAL__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_VAL_))
#define VAL__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_VAL_, Val_Class))

/* struct ColVal_ */
struct _ColVal_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * col;
  gboolean __isset_col;
  Val_ * val;
  gboolean __isset_val;
};
typedef struct _ColVal_ ColVal_;

struct _ColVal_Class
{
  ThriftStructClass parent;
};
typedef struct _ColVal_Class ColVal_Class;

GType col_val__get_type (void);
#define TYPE_COL_VAL_ (col_val__get_type())
#define COL_VAL_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COL_VAL_, ColVal_))
#define COL_VAL__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COL_VAL_, ColVal_Class))
#define IS_COL_VAL_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COL_VAL_))
#define IS_COL_VAL__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COL_VAL_))
#define COL_VAL__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COL_VAL_, ColVal_Class))

/* struct InsertStmt_ */
struct _InsertStmt_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * tblName;
  gboolean __isset_tblName;
  GPtrArray * rows;
  gboolean __isset_rows;
};
typedef struct _InsertStmt_ InsertStmt_;

struct _InsertStmt_Class
{
  ThriftStructClass parent;
};
typedef struct _InsertStmt_Class InsertStmt_Class;

GType insert_stmt__get_type (void);
#define TYPE_INSERT_STMT_ (insert_stmt__get_type())
#define INSERT_STMT_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_INSERT_STMT_, InsertStmt_))
#define INSERT_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_INSERT_STMT_, InsertStmt_Class))
#define IS_INSERT_STMT_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_INSERT_STMT_))
#define IS_INSERT_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_INSERT_STMT_))
#define INSERT_STMT__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_INSERT_STMT_, InsertStmt_Class))

/* struct DropStmt_ */
struct _DropStmt_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * tblName;
  gboolean __isset_tblName;
};
typedef struct _DropStmt_ DropStmt_;

struct _DropStmt_Class
{
  ThriftStructClass parent;
};
typedef struct _DropStmt_Class DropStmt_Class;

GType drop_stmt__get_type (void);
#define TYPE_DROP_STMT_ (drop_stmt__get_type())
#define DROP_STMT_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DROP_STMT_, DropStmt_))
#define DROP_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DROP_STMT_, DropStmt_Class))
#define IS_DROP_STMT_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DROP_STMT_))
#define IS_DROP_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DROP_STMT_))
#define DROP_STMT__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DROP_STMT_, DropStmt_Class))

/* struct FullColumnName_ */
struct _FullColumnName_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * row_name;
  gboolean __isset_row_name;
  gchar * col_name;
  gboolean __isset_col_name;
};
typedef struct _FullColumnName_ FullColumnName_;

struct _FullColumnName_Class
{
  ThriftStructClass parent;
};
typedef struct _FullColumnName_Class FullColumnName_Class;

GType full_column_name__get_type (void);
#define TYPE_FULL_COLUMN_NAME_ (full_column_name__get_type())
#define FULL_COLUMN_NAME_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FULL_COLUMN_NAME_, FullColumnName_))
#define FULL_COLUMN_NAME__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FULL_COLUMN_NAME_, FullColumnName_Class))
#define IS_FULL_COLUMN_NAME_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FULL_COLUMN_NAME_))
#define IS_FULL_COLUMN_NAME__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FULL_COLUMN_NAME_))
#define FULL_COLUMN_NAME__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FULL_COLUMN_NAME_, FullColumnName_Class))

/* struct Condition_ */
struct _Condition_
{ 
  ThriftStruct parent; 

  /* public */
  FullColumnName_ * column;
  gboolean __isset_column;
  CompType_ comp_type;
  gboolean __isset_comp_type;
  Val_ * value;
  gboolean __isset_value;
};
typedef struct _Condition_ Condition_;

struct _Condition_Class
{
  ThriftStructClass parent;
};
typedef struct _Condition_Class Condition_Class;

GType condition__get_type (void);
#define TYPE_CONDITION_ (condition__get_type())
#define CONDITION_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONDITION_, Condition_))
#define CONDITION__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CONDITION_, Condition_Class))
#define IS_CONDITION_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONDITION_))
#define IS_CONDITION__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CONDITION_))
#define CONDITION__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONDITION_, Condition_Class))

/* struct CompoundCondition_ */
struct _CompoundCondition_
{ 
  ThriftStruct parent; 

  /* public */
  Condition_ * left;
  gboolean __isset_left;
  LogicalOperator_ op;
  gboolean __isset_op;
  GPtrArray * right;
  gboolean __isset_right;
};
typedef struct _CompoundCondition_ CompoundCondition_;

struct _CompoundCondition_Class
{
  ThriftStructClass parent;
};
typedef struct _CompoundCondition_Class CompoundCondition_Class;

GType compound_condition__get_type (void);
#define TYPE_COMPOUND_CONDITION_ (compound_condition__get_type())
#define COMPOUND_CONDITION_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COMPOUND_CONDITION_, CompoundCondition_))
#define COMPOUND_CONDITION__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COMPOUND_CONDITION_, CompoundCondition_Class))
#define IS_COMPOUND_CONDITION_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COMPOUND_CONDITION_))
#define IS_COMPOUND_CONDITION__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COMPOUND_CONDITION_))
#define COMPOUND_CONDITION__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COMPOUND_CONDITION_, CompoundCondition_Class))

/* struct Projection_ */
struct _Projection_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * new_col;
  gboolean __isset_new_col;
  FullColumnName_ * src;
  gboolean __isset_src;
};
typedef struct _Projection_ Projection_;

struct _Projection_Class
{
  ThriftStructClass parent;
};
typedef struct _Projection_Class Projection_Class;

GType projection__get_type (void);
#define TYPE_PROJECTION_ (projection__get_type())
#define PROJECTION_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PROJECTION_, Projection_))
#define PROJECTION__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PROJECTION_, Projection_Class))
#define IS_PROJECTION_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PROJECTION_))
#define IS_PROJECTION__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PROJECTION_))
#define PROJECTION__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PROJECTION_, Projection_Class))

/* struct SelectList_ */
struct _SelectList_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * rowName;
  gboolean __isset_rowName;
  GPtrArray * projs;
  gboolean __isset_projs;
};
typedef struct _SelectList_ SelectList_;

struct _SelectList_Class
{
  ThriftStructClass parent;
};
typedef struct _SelectList_Class SelectList_Class;

GType select_list__get_type (void);
#define TYPE_SELECT_LIST_ (select_list__get_type())
#define SELECT_LIST_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SELECT_LIST_, SelectList_))
#define SELECT_LIST__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SELECT_LIST_, SelectList_Class))
#define IS_SELECT_LIST_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SELECT_LIST_))
#define IS_SELECT_LIST__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SELECT_LIST_))
#define SELECT_LIST__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SELECT_LIST_, SelectList_Class))

/* struct Join_ */
struct _Join_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * rowName;
  gboolean __isset_rowName;
  gchar * tblName;
  gboolean __isset_tblName;
  FullColumnName_ * left_col;
  gboolean __isset_left_col;
  FullColumnName_ * right_col;
  gboolean __isset_right_col;
};
typedef struct _Join_ Join_;

struct _Join_Class
{
  ThriftStructClass parent;
};
typedef struct _Join_Class Join_Class;

GType join__get_type (void);
#define TYPE_JOIN_ (join__get_type())
#define JOIN_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_JOIN_, Join_))
#define JOIN__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_JOIN_, Join_Class))
#define IS_JOIN_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_JOIN_))
#define IS_JOIN__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_JOIN_))
#define JOIN__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_JOIN_, Join_Class))

/* struct SelectStmt_ */
struct _SelectStmt_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * rowName;
  gboolean __isset_rowName;
  gchar * tblName;
  gboolean __isset_tblName;
  Join_ * join;
  gboolean __isset_join;
  CompoundCondition_ * where;
  gboolean __isset_where;
  SelectList_ * select;
  gboolean __isset_select;
};
typedef struct _SelectStmt_ SelectStmt_;

struct _SelectStmt_Class
{
  ThriftStructClass parent;
};
typedef struct _SelectStmt_Class SelectStmt_Class;

GType select_stmt__get_type (void);
#define TYPE_SELECT_STMT_ (select_stmt__get_type())
#define SELECT_STMT_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SELECT_STMT_, SelectStmt_))
#define SELECT_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SELECT_STMT_, SelectStmt_Class))
#define IS_SELECT_STMT_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SELECT_STMT_))
#define IS_SELECT_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SELECT_STMT_))
#define SELECT_STMT__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SELECT_STMT_, SelectStmt_Class))

/* struct UpdateStmt_ */
struct _UpdateStmt_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * tblName;
  gboolean __isset_tblName;
  GPtrArray * new_row;
  gboolean __isset_new_row;
  CompoundCondition_ * cond;
  gboolean __isset_cond;
};
typedef struct _UpdateStmt_ UpdateStmt_;

struct _UpdateStmt_Class
{
  ThriftStructClass parent;
};
typedef struct _UpdateStmt_Class UpdateStmt_Class;

GType update_stmt__get_type (void);
#define TYPE_UPDATE_STMT_ (update_stmt__get_type())
#define UPDATE_STMT_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UPDATE_STMT_, UpdateStmt_))
#define UPDATE_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_UPDATE_STMT_, UpdateStmt_Class))
#define IS_UPDATE_STMT_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UPDATE_STMT_))
#define IS_UPDATE_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_UPDATE_STMT_))
#define UPDATE_STMT__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UPDATE_STMT_, UpdateStmt_Class))

/* struct DeleteStmt_ */
struct _DeleteStmt_
{ 
  ThriftStruct parent; 

  /* public */
  gchar * tblName;
  gboolean __isset_tblName;
  CompoundCondition_ * cond;
  gboolean __isset_cond;
};
typedef struct _DeleteStmt_ DeleteStmt_;

struct _DeleteStmt_Class
{
  ThriftStructClass parent;
};
typedef struct _DeleteStmt_Class DeleteStmt_Class;

GType delete_stmt__get_type (void);
#define TYPE_DELETE_STMT_ (delete_stmt__get_type())
#define DELETE_STMT_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DELETE_STMT_, DeleteStmt_))
#define DELETE_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DELETE_STMT_, DeleteStmt_Class))
#define IS_DELETE_STMT_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DELETE_STMT_))
#define IS_DELETE_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DELETE_STMT_))
#define DELETE_STMT__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DELETE_STMT_, DeleteStmt_Class))

/* struct Stmt_ */
struct _Stmt_
{ 
  ThriftStruct parent; 

  /* public */
  CreateStmt_ * create_tbl;
  gboolean __isset_create_tbl;
  DropStmt_ * drop_tbl;
  gboolean __isset_drop_tbl;
  InsertStmt_ * insert;
  gboolean __isset_insert;
  SelectStmt_ * select;
  gboolean __isset_select;
  UpdateStmt_ * update;
  gboolean __isset_update;
  DeleteStmt_ * dl;
  gboolean __isset_dl;
};
typedef struct _Stmt_ Stmt_;

struct _Stmt_Class
{
  ThriftStructClass parent;
};
typedef struct _Stmt_Class Stmt_Class;

GType stmt__get_type (void);
#define TYPE_STMT_ (stmt__get_type())
#define STMT_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STMT_, Stmt_))
#define STMT__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_STMT_, Stmt_Class))
#define IS_STMT_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STMT_))
#define IS_STMT__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_STMT_))
#define STMT__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STMT_, Stmt_Class))

/* struct Statement_ */
struct _Statement_
{ 
  ThriftStruct parent; 

  /* public */
  QueryType_ st_type;
  gboolean __isset_st_type;
  Stmt_ * stmt;
  gboolean __isset_stmt;
};
typedef struct _Statement_ Statement_;

struct _Statement_Class
{
  ThriftStructClass parent;
};
typedef struct _Statement_Class Statement_Class;

GType statement__get_type (void);
#define TYPE_STATEMENT_ (statement__get_type())
#define STATEMENT_(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STATEMENT_, Statement_))
#define STATEMENT__CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_STATEMENT_, Statement_Class))
#define IS_STATEMENT_(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STATEMENT_))
#define IS_STATEMENT__CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_STATEMENT_))
#define STATEMENT__GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STATEMENT_, Statement_Class))

/* struct ServerResponse */
struct _ServerResponse
{ 
  ThriftStruct parent; 

  /* public */
  gchar * info;
  gboolean __isset_info;
  GPtrArray * rows;
  gboolean __isset_rows;
  Status_ status;
  gboolean __isset_status;
};
typedef struct _ServerResponse ServerResponse;

struct _ServerResponseClass
{
  ThriftStructClass parent;
};
typedef struct _ServerResponseClass ServerResponseClass;

GType server_response_get_type (void);
#define TYPE_SERVER_RESPONSE (server_response_get_type())
#define SERVER_RESPONSE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SERVER_RESPONSE, ServerResponse))
#define SERVER_RESPONSE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SERVER_RESPONSE, ServerResponseClass))
#define IS_SERVER_RESPONSE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SERVER_RESPONSE))
#define IS_SERVER_RESPONSE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SERVER_RESPONSE))
#define SERVER_RESPONSE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SERVER_RESPONSE, ServerResponseClass))

/* constants */

/* struct SendStatement_serviceExecuteStmtArgs */
struct _SendStatement_serviceExecuteStmtArgs
{ 
  ThriftStruct parent; 

  /* public */
  Statement_ * statement;
  gboolean __isset_statement;
};
typedef struct _SendStatement_serviceExecuteStmtArgs SendStatement_serviceExecuteStmtArgs;

struct _SendStatement_serviceExecuteStmtArgsClass
{
  ThriftStructClass parent;
};
typedef struct _SendStatement_serviceExecuteStmtArgsClass SendStatement_serviceExecuteStmtArgsClass;

GType send_statement_service_execute_stmt_args_get_type (void);
#define TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS (send_statement_service_execute_stmt_args_get_type())
#define SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS, SendStatement_serviceExecuteStmtArgs))
#define SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS, SendStatement_serviceExecuteStmtArgsClass))
#define IS_SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS))
#define IS_SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS))
#define SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_ARGS, SendStatement_serviceExecuteStmtArgsClass))

/* struct SendStatement_serviceExecuteStmtResult */
struct _SendStatement_serviceExecuteStmtResult
{ 
  ThriftStruct parent; 

  /* public */
  ServerResponse * success;
  gboolean __isset_success;
};
typedef struct _SendStatement_serviceExecuteStmtResult SendStatement_serviceExecuteStmtResult;

struct _SendStatement_serviceExecuteStmtResultClass
{
  ThriftStructClass parent;
};
typedef struct _SendStatement_serviceExecuteStmtResultClass SendStatement_serviceExecuteStmtResultClass;

GType send_statement_service_execute_stmt_result_get_type (void);
#define TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT (send_statement_service_execute_stmt_result_get_type())
#define SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT, SendStatement_serviceExecuteStmtResult))
#define SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT, SendStatement_serviceExecuteStmtResultClass))
#define IS_SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT))
#define IS_SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT))
#define SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SEND_STATEMENT_SERVICE_EXECUTE_STMT_RESULT, SendStatement_serviceExecuteStmtResultClass))

#endif /* NT_STRUCTS_TYPES_H */
